git init <filename>                 初始化一个git容器
git add                             将改动从工作区添加到暂存区
git commit -m ""                    将改动从暂存区添加到当前分支
git status                          查看git仓库当前的状态
git diff <filename>                 如果git status告诉你文件被修改过，你可以查看文件修改前后的变化
git diff HEAD -- <filename>         查看工作区和版本库里最新版的区别
git log                             查看文件被修改的历史记录（生命周期）
git log --pretty=oneline            简化输出的历史信息
git reset --hard HEAD^              恢复到上一个版本。HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示上上一个版本，HEAD～100表示上100个版本。
git reset --hard <commit id>        根据版本号（前几位就可以）进行恢复
git reflog                          显示使用过的每一次命令
git checkout -- <filename>          用版本库中的版本替换工作区的版本（撤销工作区的修改）
git reset HEAD <filename>           把暂存区的修改撤销掉，重新放回工作区
git rm <filename>                   删除版本库中的文件(需要git commit)
# --------------------------
ssh-keygen -t rsa -C "youremail@example.com"   创建SSH Key
#---------------------------
git remote add origin git@github.com:supan-code/deeplearn.git   关联远程库(ssh协议)
git push -u origin master           第一次推送到远端
git push origin master              第n>=2次推送到远端
git clone <link>                    克隆远程库
git checkout -b dev                 创建并切换到dev分支
git branch dev                      创建dev分支
git checkout dev                    切换到dev分支
git branch                          查看当前分支
git merge dev                       合并指定分支dev到当前分支
git branch -d dev                   删除指定分支dev
git switch -c dev                   创建并切换到新的dev分支
git switch master                   直接切换到master分支
git merge --no-ff -m "information" dev               以普通模式合并制定分支dev到当前分支
git log --graph                     以图的形式呈现日志
git stash                           将当前工作现场“储藏”起来
git stash list                      查看“储藏”的工作现场
git stash apply stash@{0}           恢复工作现场，但不删除
git stash drop                      删除“储藏”的工作现场
git stash pop                       恢复工作现场，并从stash中删除
git cherry-pick <commit id>         将另一个分支的修改commit id复制过来
git branch -D <name>                强行删除分支
git remote                          查看远程库信息
git remote -v                       显示远程库更详细的信息
git checkout -b dev origin/dev      创建远程origin的dev的分支到本地
git pull                            把最新的提交抓取到本地
# ---多人协作---
git push origin <branch-name>
git branch --set-upstream-to <branch-name> origin/<branch-name>    如果git pull失败
git pull
git push origin <branch-name>
git rebase                          将本地未push的分叉提交整理为直线（会改变本地的commit历史）
# ---tags manage---
git tag <tag-name>                  创建标签
git tag                             查看所有标签
git tag <tag-name>  <commit-id>     在指定位置打标签
git show <tag-name>                 查看标签信息
git tag -a <tag-name> -m <description>  -a指定标签名，-m指定说明文字
git tag -d <tag-name>               删除标签
git push origin <tag-name>          推送标签到远程
git push origin --tags              推送所有未推送的标签到远程
    # 删除远程标签
    git tag -d <tag-name>           先删除本地标签
    git push origin :refs/tags/<tag-name>
# ---tags manage end---
